{
	"openrpc": "1.2.4",
	"info": {
		"title": "Portal Network JSON-RPC Specification",
		"description": "A specification of the standard interface for Portal Network clients.",
		"license": {
			"name": "CC0-1.0",
			"url": "https://creativecommons.org/publicdomain/zero/1.0/legalcode"
		},
		"version": "0.0.1"
	},
	"methods": [
		{
			"name": "discv5_nodeInfo",
			"summary": "Returns ENR and nodeId information of the local discv5 node.",
			"params": [],
			"result": {
				"name": "nodeInfoResult",
				"description": "Local node information",
				"required": true,
				"schema": {
					"title": "nodeInfoResults",
					"description": "ENR and NodeId of the local peer",
					"type": "object",
					"required": [
						"enr",
						"nodeId"
					],
					"properties": {
						"enr": {
							"title": "nodeENR",
							"description": "URL-safe base64 encoded \\\"text\\\" version of the ENR prefixed by \\\"enr:\\\".\"",
							"$ref": "#/components/schemas/Enr"
						},
						"nodeId": {
							"title": "nodeId",
							"description": "Hex encoded `NodeId` of an ENR (a 32 byte identifier).",
							"$ref": "#/components/schemas/bytes32"
						}
					}
				}
			}
		},
		{
			"name": "discv5_updateNodeInfo",
			"summary": "Add, update, or remove a key-value pair from the local node record",
			"params": [
				{
					"name": "socketAddr",
					"required": true,
					"schema": {
						"title": "ENR socket address",
						"$ref": "#/components/schemas/socketAddr"
					}
				},
				{
					"name": "isTcp",
					"description": "TCP or UDP socket",
					"schema": {
						"type": "boolean"
					}
				}
			],
			"result": {
				"name": "nodeInfoResult",
				"description": "Local node information",
				"required": true,
				"schema": {
					"title": "nodeInfoResults",
					"description": "ENR and NodeId of the local peer",
					"type": "object",
					"required": [
						"enr",
						"localNodeId"
					],
					"properties": {
						"enr": {
							"title": "nodeENR",
							"description": "URL-safe base64 encoded \\\"text\\\" version of the ENR prefixed by \\\"enr:\\\".\"",
							"$ref": "#/components/schemas/Enr"
						},
						"localNodeId": {
							"title": "nodeId",
							"description": "Hex encoded `NodeId` of an ENR (a 32 byte identifier).",
							"$ref": "#/components/schemas/bytes32"
						}
					}
				}
			}
		},
		{
			"name": "discv5_routingTableInfo",
			"summary": "Returns meta information about discv5 routing table.",
			"params": [],
			"result": {
				"$ref": "#/components/contentDescriptors/RoutingTableInfoResult"
			}
		},
		{
			"name": "discv5_addEnr",
			"summary": "Write an ethereum node record to the routing table.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/AddEnrResult"
			}
		},
		{
			"name": "discv5_getEnr",
			"summary": "Fetch the latest ENR associated with the given node ID",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/GetEnrResult"
			}
		},
		{
			"name": "discv5_deleteEnr",
			"summary": "Delete a Node ID from the routing table",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/DeleteEnrResult"
			}
		},
		{
			"name": "discv5_lookupEnr",
			"summary": "Fetch the ENR representation associated with the given Node ID and optional sequence number",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				},
				{
					"$ref": "#/components/contentDescriptors/EnrSeq"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/LookupEnrResult"
			}
		},
		{
			"name": "discv5_sendPing",
			"summary": "Send a PING message to the specified node",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendPingResult"
			}
		},
		{
			"name": "discv5_sendPong",
			"summary": "Send a PONG message to the specified node",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/RequestId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendPongResult"
			}
		},
		{
			"name": "discv5_sendFindNode",
			"summary": "Send a FINDNODE request to a peer, to search within the given set of distances",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/Distances"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendFindNodeResult"
			}
		},
		{
			"name": "discv5_sendNodes",
			"summary": "Respond to a specific FINDNODE request with a NODES response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/Nodes"
				},
				{
					"$ref": "#/components/contentDescriptors/RequestId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendNodesResult"
			}
		},
		{
			"name": "discv5_sendTalkRequest",
			"summary": "Send a TALKREQ request with a payload to the given peer.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ProtocolId"
				},
				{
					"$ref": "#/components/contentDescriptors/Discv5Payload"
				}
			],
			"result": {
				"name": "sendTalkRequestResult",
				"description": "Returns the request-id assigned to the request message-data",
				"schema": {
					"title": "request-id",
					"$ref": "#/components/schemas/bytes8"
				}
			}
		},
		{
			"name": "discv5_sendTalkResponse",
			"summary": "Respond to a TALKREQ request by sending a TALKRESP response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/Discv5Payload"
				},
				{
					"$ref": "#/components/contentDescriptors/RequestId"
				}
			],
			"result": {
				"name": "sendTalkResponseResult",
				"description": "Returns \"true\" upon success.",
				"schema": {
					"type": "boolean"
				}
			}
		},
		{
			"name": "discv5_ping",
			"summary": "Send a PING message to the designated node and wait for a PONG response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				}
			],
			"result": {
				"name": "pingResult",
				"description": "Returns PONG response",
				"schema": {
					"title": "PONG message",
					"type": "object",
					"required": [
						"enrSeq",
						"recipientIP",
						"recipientPort"
					],
					"properties": {
						"enrSeq": {
							"description": "ENR sequence number of sender",
							"type": "number"
						},
						"recipientIP": {
							"description": "IP address of the intended recipient",
							"$ref": "#/components/schemas/ipAddr"
						},
						"recipientPort": {
							"description": "recipient UDP port",
							"$ref": "#/components/schemas/udpPort"
						}
					}
				}
			}
		},
		{
			"name": "discv5_findNode",
			"summary": "Send a FINDNODE request for nodes that fall within the given set of distances, to the designated peer and wait for a response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/Distances"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/FindNodeResult"
			}
		},
		{
			"name": "discv5_talkReq",
			"summary": "Send a TALKREQ request with a payload to a given peer and wait for response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ProtocolId"
				},
				{
					"$ref": "#/components/contentDescriptors/Discv5Payload"
				}
			],
			"result": {
				"name": "talkResult",
				"description": "Returns TALKRESP message as hex string",
				"schema": {
					"$ref": "#/components/schemas/hexString"
				}
			}
		},
		{
			"name": "discv5_recursiveFindNode",
			"summary": "Lookup a target node within in the network",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/RecursiveFindNodeResult"
			}
		},
		{
			"name": "portal_historyRoutingTableInfo",
			"summary": "Returns meta information about history network routing table.",
			"params": [],
			"result": {
				"$ref": "#/components/contentDescriptors/RoutingTableInfoResult"
			}
		},
		{
			"name": "portal_historyAddEnr",
			"summary": "Write an ethereum node record to the routing table.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/AddEnrResult"
			}
		},
		{
			"name": "portal_historyGetEnr",
			"summary": "Fetch the latest ENR associated with the given node ID",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/GetEnrResult"
			}
		},
		{
			"name": "portal_historyDeleteEnr",
			"summary": "Delete a Node ID from the routing table",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/DeleteEnrResult"
			}
		},
		{
			"name": "portal_historyLookupEnr",
			"summary": "Fetch the ENR representation associated with the given Node ID and optional sequence number",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				},
				{
					"$ref": "#/components/contentDescriptors/EnrSeq"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/LookupEnrResult"
			}
		},
		{
			"name": "portal_historySendPing",
			"summary": "Send a PING message to the specified node",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/DataRadius"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendPingResult"
			}
		},
		{
			"name": "portal_historySendPong",
			"summary": "Send a PONG message to the specified node",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/RequestId"
				},
				{
					"$ref": "#/components/contentDescriptors/DataRadius"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendPongResult"
			}
		},
		{
			"name": "portal_historySendFindNodes",
			"summary": "Send a FINDNODES request to a peer, to search within the given set of distances",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/Distances"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendFindNodeResult"
			}
		},
		{
			"name": "portal_historySendNodes",
			"summary": "Respond to a specific FINDNODES request with a NODES response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/Nodes"
				},
				{
					"$ref": "#/components/contentDescriptors/RequestId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendNodesResult"
			}
		},
		{
			"name": "portal_historySendFindContent",
			"summary": "Send FINDCONTENT message.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendFindContentResult"
			}
		},
		{
			"name": "portal_historySendContent",
			"summary": "Send CONTENT message. This message can contain either a uTP connection ID, a list of ENRs or the requested content.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ConnectionId"
				},
				{
					"$ref": "#/components/contentDescriptors/Content"
				},
				{
					"$ref": "#/components/contentDescriptors/Enrs"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendContentResult"
			}
		},
		{
			"name": "portal_historySendOffer",
			"summary": "Request message to offer a set of content_keys that this node has content available for.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentKeys"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendOfferResult"
			}
		},
		{
			"name": "portal_historySendAccept",
			"summary": "Signals interest in receiving the offered data from the corresponding Offer message.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ConnectionId"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentKeys"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendAcceptResult"
			}
		},
		{
			"name": "portal_historyPing",
			"summary": "Send a PING message to the designated node and wait for a PONG response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/DataRadius"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/PingResult"
			}
		},
		{
			"name": "portal_historyFindNodes",
			"summary": "Send a FINDNODES request for nodes that fall within the given set of distances, to the designated peer and wait for a response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/Distances"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/FindNodeResult"
			}
		},
		{
			"name": "portal_historyFindContent",
			"summary": "Send FINDCONTENT message to get the content with a content key.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/FindContentResult"
			}
		},
		{
			"name": "portal_historyOffer",
			"summary": "Send an OFFER request with given ContentKey, to the designated peer and wait for a response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentValue"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/OfferResult"
			}
		},
		{
			"name": "portal_historyRecursiveFindNodes",
			"summary": "Lookup a target node within in the network",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/RecursiveFindNodeResult"
			}
		},
		{
			"name": "portal_historyRecursiveFindContent",
			"summary": "Look up a target content key in the network",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/RecursiveFindContentResult"
			}
		},
		{
			"name": "portal_historyStore",
			"summary": "Store history content key with content data",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentValue"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/ContentResult"
			}
		},
		{
			"name": "portal_historyLocalContent",
			"summary": "Get a content from the local database",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/LocalContentResult"
			}
		},
		{
			"name": "portal_historyGossip",
			"summary": "Send the provided content item to interested peers. Clients may choose to send to some or all peers.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentValue"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/GossipResult"
			}
		},
		{
			"name": "portal_stateRoutingTableInfo",
			"summary": "Returns meta information about state network routing table.",
			"params": [],
			"result": {
				"$ref": "#/components/contentDescriptors/RoutingTableInfoResult"
			}
		},
		{
			"name": "portal_stateAddEnr",
			"summary": "Write an ethereum node record to the routing table.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/AddEnrResult"
			}
		},
		{
			"name": "portal_stateGetEnr",
			"summary": "Fetch the latest ENR associated with the given node ID",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/GetEnrResult"
			}
		},
		{
			"name": "portal_stateDeleteEnr",
			"summary": "Delete a Node ID from the routing table",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/DeleteEnrResult"
			}
		},
		{
			"name": "portal_stateLookupEnr",
			"summary": "Fetch the ENR representation associated with the given Node ID and optional sequence number",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				},
				{
					"$ref": "#/components/contentDescriptors/EnrSeq"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/LookupEnrResult"
			}
		},
		{
			"name": "portal_stateSendPing",
			"summary": "Send a PING message to the specified node",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/DataRadius"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendPingResult"
			}
		},
		{
			"name": "portal_stateSendPong",
			"summary": "Send a PONG message to the specified node",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/RequestId"
				},
				{
					"$ref": "#/components/contentDescriptors/DataRadius"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendPongResult"
			}
		},
		{
			"name": "portal_stateSendFindNodes",
			"summary": "Send a FINDNODES request to a peer, to search within the given set of distances",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/Distances"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendFindNodeResult"
			}
		},
		{
			"name": "portal_stateSendNodes",
			"summary": "Respond to a specific FINDNODES request with a NODES response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/Nodes"
				},
				{
					"$ref": "#/components/contentDescriptors/RequestId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendNodesResult"
			}
		},
		{
			"name": "portal_stateSendFindContent",
			"summary": "Send FINDCONTENT message..",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendFindContentResult"
			}
		},
		{
			"name": "portal_stateSendContent",
			"summary": "Send CONTENT message. This message can contain either a uTP connection ID, a list of ENRs or the requested content.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ConnectionId"
				},
				{
					"$ref": "#/components/contentDescriptors/Content"
				},
				{
					"$ref": "#/components/contentDescriptors/Enrs"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendContentResult"
			}
		},
		{
			"name": "portal_stateSendOffer",
			"summary": "Request message to offer a set of content_keys that this node has content available for.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentKeys"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendOfferResult"
			}
		},
		{
			"name": "portal_stateSendAccept",
			"summary": "Signals interest in receiving the offered data from the corresponding Offer message.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ConnectionId"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentKeys"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/SendAcceptResult"
			}
		},
		{
			"name": "portal_statePing",
			"summary": "Send a PING message to the designated node and wait for a PONG response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/DataRadius"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/PingResult"
			}
		},
		{
			"name": "portal_stateFindNodes",
			"summary": "Send a FINDNODES request for nodes that fall within the given set of distances, to the designated peer and wait for a response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/Distances"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/FindNodeResult"
			}
		},
		{
			"name": "portal_stateFindContent",
			"summary": "Send FINDCONTENT message to get the content with a content key.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/FindContentResult"
			}
		},
		{
			"name": "portal_stateOffer",
			"summary": "Send an OFFER request with given ContentKey, to the designated peer and wait for a response.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/Enr"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentValue"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/OfferResult"
			}
		},
		{
			"name": "portal_stateRecursiveFindNodes",
			"summary": "Lookup a target node within in the network",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/NodeId"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/RecursiveFindNodeResult"
			}
		},
		{
			"name": "portal_stateRecursiveFindContent",
			"summary": "Look up a target content key in the network",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/RecursiveFindContentResult"
			}
		},
		{
			"name": "portal_stateStore",
			"summary": "Store state content key with content data",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentValue"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/ContentResult"
			}
		},
		{
			"name": "portal_stateLocalContent",
			"summary": "Get a content from the local database",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/LocalContentResult"
			}
		},
		{
			"name": "portal_stateGossip",
			"summary": "Send the provided content item to interested peers. Clients may choose to send to some or all peers.",
			"params": [
				{
					"$ref": "#/components/contentDescriptors/ContentKey"
				},
				{
					"$ref": "#/components/contentDescriptors/ContentValue"
				}
			],
			"result": {
				"$ref": "#/components/contentDescriptors/GossipResult"
			}
		}
	],
	"components": {
		"contentDescriptors": {
			"ConnectionId": {
				"name": "connectionId",
				"description": "uTP connection ID",
				"schema": {
					"type": "number"
				}
			},
			"Content": {
				"name": "content",
				"description": "Content data",
				"schema": {
					"$ref": "#/components/schemas/hexString"
				}
			},
			"ContentKey": {
				"name": "contentKey",
				"required": true,
				"schema": {
					"$ref": "#/components/schemas/hexString"
				}
			},
			"ContentKeys": {
				"name": "contentKeys",
				"description": "A list of encoded content_key entries",
				"schema": {
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/hexString"
					}
				}
			},
			"Discv5Payload": {
				"name": "payload",
				"required": true,
				"description": "request element of message-data",
				"schema": {
					"$ref": "#/components/schemas/hexString"
				}
			},
			"Distances": {
				"name": "distances",
				"required": true,
				"schema": {
					"title": "distance",
					"type": "array",
					"items": {
						"type": "number"
					}
				}
			},
			"Enr": {
				"name": "enr",
				"required": true,
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			},
			"Enrs": {
				"name": "enrs",
				"description": "List of ENR records of nodes.",
				"schema": {
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/Enr"
					}
				}
			},
			"EnrSeq": {
				"name": "enrSeq",
				"schema": {
					"type": "number"
				}
			},
			"NodeId": {
				"name": "nodeId",
				"required": true,
				"schema": {
					"title": "NodeId",
					"$ref": "#/components/schemas/bytes32"
				}
			},
			"Nodes": {
				"name": "nodes",
				"required": true,
				"schema": {
					"title": "nodes",
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/Enr"
					}
				}
			},
			"DataRadius": {
				"name": "dataRadius",
				"description": "Data radius value",
				"schema": {
					"$ref": "#/components/schemas/DataRadius"
				}
			},
			"ProtocolId": {
				"name": "protocolId",
				"required": true,
				"description": "protocol element of message-data",
				"schema": {
					"title": "protocol id",
					"$ref": "#/components/schemas/hexString"
				}
			},
			"RequestId": {
				"name": "requestId",
				"description": "request-id element of message-data",
				"required": true,
				"schema": {
					"title": "Hex encoded RLP byte array of length <= 8 bytes",
					"$ref": "#/components/schemas/bytes8"
				}
			},
			"ContentValue": {
				"name": "contentValue",
				"description": "The encoded Content value",
				"required": true,
				"schema": {
					"$ref": "#/components/schemas/hexString"
				}
			},
			"AcceptResult": {
				"name": "acceptResult",
				"description": "Returns \"true\" upon successful uTP stream initialization",
				"schema": {
					"type": "boolean"
				}
			},
			"SendAcceptResult": {
				"name": "sendAcceptResult",
				"description": "Returns the request-id assigned to the request message-data",
				"schema": {
					"title": "request-id",
					"$ref": "#/components/schemas/bytes8"
				}
			},
			"AddEnrResult": {
				"name": "addEnrResult",
				"description": "Returns boolean if the node record has been successfully saved.",
				"schema": {
					"type": "boolean"
				}
			},
			"ContentResult": {
				"name": "contentResult",
				"description": "Returns \"true\" upon success",
				"schema": {
					"type": "boolean"
				}
			},
			"SendContentResult": {
				"name": "sendContentResult",
				"description": "Returns the request-id assigned to the request message-data",
				"schema": {
					"title": "request-id",
					"$ref": "#/components/schemas/bytes8"
				}
			},
			"DeleteEnrResult": {
				"name": "deleteEnrResult",
				"description": "Returns boolean upon successful deletion of the node record.",
				"schema": {
					"type": "boolean"
				}
			},
			"FindContentResult": {
				"name": "findContentResult",
				"description": "Returns CONTENT message with a content or, in case the recipient does not have the data, a list of ENR records of nodes that are closer than the recipient is to the requested content.",
				"schema": {
					"title": "CONTENT message",
					"type": "object",
					"properties": {
						"connectionId": {
							"description": "uTP connection ID",
							"schema": {
								"type": "number"
							}
						},
						"content": {
							"description": "Requested content",
							"$ref": "#/components/schemas/hexString"
						},
						"enrs": {
							"description": "list of ENR records of nodes that are closer than the recipient is to the requested content",
							"type": "array",
							"items": {
								"$ref": "#/components/schemas/Enr"
							}
						}
					}
				}
			},
			"FindNodeResult": {
				"name": "findNodeResult",
				"description": "Returns nodes in a given distance",
				"schema": {
					"title": "NODES message",
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/Enr"
					}
				}
			},
			"GetEnrResult": {
				"name": "getEnrResult",
				"description": "Returns latest ENR associated with the given node ID.",
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			},
			"LookupEnrResult": {
				"name": "lookupEnrResult",
				"description": "Returns ENR associated with the given node ID",
				"schema": {
					"title": "Ethereum node record",
					"$ref": "#/components/schemas/Enr"
				}
			},
			"OfferResult": {
				"name": "offerResult",
				"description": "Returns the content keys bitlist upon successful content transmission or empty bitlist receival",
				"schema": {
					"title": "Encoded content keys bitlist",
					"$ref": "#/components/schemas/hexString"
				}
			},
			"SendOfferResult": {
				"name": "sendOfferResult",
				"description": "Returns the request-id assigned to the request message-data",
				"schema": {
					"title": "request-id",
					"$ref": "#/components/schemas/bytes8"
				}
			},
			"PingResult": {
				"name": "pingResult",
				"description": "Returns PONG response",
				"schema": {
					"title": "PONG message",
					"type": "object",
					"required": [
						"enrSeq",
						"dataRadius"
					],
					"properties": {
						"enrSeq": {
							"description": "ENR sequence number of sender",
							"type": "number"
						},
						"dataRadius": {
							"description": "Data radius value",
							"$ref": "#/components/schemas/DataRadius"
						}
					}
				}
			},
			"RecursiveFindNodeResult": {
				"name": "recursiveFindNodeResult",
				"schema": {
					"type": "array",
					"items": {
						"$ref": "#/components/schemas/Enr"
					}
				}
			},
			"RecursiveFindContentResult": {
				"name": "recursiveFindContentResult",
				"description": "The data corresponding to the lookup target",
				"schema": {
					"title": "Encoded target content data",
					"$ref": "#/components/schemas/hexString"
				}
			},
			"RoutingTableInfoResult": {
				"name": "routingTableInfoResult",
				"description": "history network routing table information",
				"required": true,
				"schema": {
					"title": "routingTableInfoResults",
					"description": "Routing table details",
					"type": "object",
					"required": [
						"localNodeId",
						"buckets"
					],
					"properties": {
						"localNodeId": {
							"title": "nodeId",
							"description": "The key identifying the local peer that owns the routing table.",
							"$ref": "#/components/schemas/bytes32"
						},
						"buckets": {
							"title": "kBucketsTable",
							"description": "Represents a Kademlia routing table.",
							"$ref": "#/components/schemas/kBuckets"
						}
					}
				}
			},
			"SendFindNodeResult": {
				"name": "sendFindNodeResult",
				"description": "Returns the request-id assigned to the request message-data",
				"schema": {
					"title": "request-id",
					"$ref": "#/components/schemas/bytes8"
				}
			},
			"SendFindContentResult": {
				"name": "sendFindContentResult",
				"description": "Returns the request-id assigned to the request message-data",
				"schema": {
					"title": "request-id",
					"$ref": "#/components/schemas/bytes8"
				}
			},
			"SendNodesResult": {
				"name": "sendNodesResult",
				"description": "Returns the number of batches in which the given ENRs were divided and transmitted",
				"schema": {
					"title": "number of batches",
					"type": "number"
				}
			},
			"SendPingResult": {
				"name": "sendPingResult",
				"description": "Returns request-id element of message-data",
				"schema": {
					"title": "requestId",
					"type": "object",
					"required": [
						"requestId"
					],
					"properties": {
						"requestId": {
							"description": "Hex encoded RLP byte array of length <= 8 bytes",
							"$ref": "#/components/schemas/bytes8"
						}
					}
				}
			},
			"SendPongResult": {
				"name": "sendPongResult",
				"description": "Returns \"true\" upon success.",
				"schema": {
					"type": "boolean"
				}
			},
			"LocalContentResult": {
				"name": "localContentResult",
				"description": "Returns a hex content value. If content is not available, returns \"0x0\"",
				"schema": {
					"type": "object",
					"properties": {
						"contentValue": {
							"description": "Hex encoded content value",
							"$ref": "#/components/schemas/hexString"
						}
					}
				}
			},
			"GossipResult": {
				"name": "gossipResult",
				"description": "Returns the number of peers that the content was gossiped to",
				"schema": {
					"title": "number of peers",
					"type": "number"
				}
			}
		},
		"schemas": {
			"bytes2": {
				"title": "2 hex encoded bytes",
				"type": "string",
				"pattern": "^0x[0-9a-f]{4}$"
			},
			"bytes4": {
				"title": "4 hex encoded bytes",
				"type": "string",
				"pattern": "^0x[0-9a-f]{8}$"
			},
			"bytes8": {
				"title": "8 hex encoded bytes",
				"type": "string",
				"pattern": "^0x[0-9a-f]{16}$"
			},
			"bytes16": {
				"title": "16 hex encoded bytes",
				"type": "string",
				"pattern": "^0x[0-9a-f]{32}$"
			},
			"bytes32": {
				"title": "32 hex encoded bytes",
				"type": "string",
				"pattern": "^0x[0-9a-f]{64}$"
			},
			"bytes33": {
				"title": "33 hex encoded bytes",
				"type": "string",
				"pattern": "^0x[0-9a-f]{66}$"
			},
			"hexString": {
				"title": "Hex string",
				"type": "string",
				"pattern": "^0x[0-9a-f]$"
			},
			"uint": {
				"title": "hex encoded unsigned integer",
				"type": "string",
				"pattern": "^0x[1-9a-f]+[0-9a-f]*$"
			},
			"Bucket": {
				"title": "Bucket info",
				"description": "List of up to 16 hex encoded nodeIds, ordered from least-recently connected to most-recently connected.",
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/bytes32"
				}
			},
			"DataRadius": {
				"title": "256-bit unsigned integer",
				"type": "number"
			},
			"Enr": {
				"title": "Base64 encoded ENR",
				"type": "string",
				"pattern": "^enr:[a-zA-Z0-9_:-]{179}$"
			},
			"ipAddr": {
				"title": "IP v4/v6 address",
				"type": "string",
				"pattern": "((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))"
			},
			"kBuckets": {
				"title": "kBuckets",
				"description": "The buckets comprising the routing table.",
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Bucket"
				}
			},
			"socketAddr": {
				"title": "ENR socket address",
				"type": "string",
				"pattern": "/([0-9]{1,3}(?:\\.[0-9]{1,3}){3}|(?=[^\\/]{1,254}(?![^\\/]))(?:(?=[a-zA-Z0-9-]{1,63}\\.)(?:xn--+)?[a-zA-Z0-9]+(?:-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,63}):([0-9]{1,5})$"
			},
			"udpPort": {
				"title": "UDP port number",
				"type": "string",
				"pattern": "^([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$"
			}
		}
	}
}